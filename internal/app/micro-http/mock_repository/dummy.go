// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/micro-http/repository/dummy.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "go-micro-http/internal/app/micro-http/entity"
	reflect "reflect"
)

// MockDummyEmployee is a mock of DummyEmployee interface
type MockDummyEmployee struct {
	ctrl     *gomock.Controller
	recorder *MockDummyEmployeeMockRecorder
}

// MockDummyEmployeeMockRecorder is the mock recorder for MockDummyEmployee
type MockDummyEmployeeMockRecorder struct {
	mock *MockDummyEmployee
}

// NewMockDummyEmployee creates a new mock instance
func NewMockDummyEmployee(ctrl *gomock.Controller) *MockDummyEmployee {
	mock := &MockDummyEmployee{ctrl: ctrl}
	mock.recorder = &MockDummyEmployeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDummyEmployee) EXPECT() *MockDummyEmployeeMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockDummyEmployee) List() (entity.DummyEmployees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(entity.DummyEmployees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDummyEmployeeMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDummyEmployee)(nil).List))
}

// Find mocks base method
func (m *MockDummyEmployee) Find(id string) (*entity.DummyEmployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*entity.DummyEmployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockDummyEmployeeMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDummyEmployee)(nil).Find), id)
}
